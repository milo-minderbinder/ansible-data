export BASH_SILENCE_DEPRECATION_WARNING=1

add_to_path() {
	local path_entries
	path_entries="$(printf '%s\n' "${PATH}" | tr ':' '\n')"
	for path_entry in "$@"; do
		if ! printf '%s\n' "${path_entries}" | grep --fixed-strings --line-regexp --quiet "${path_entry}"; then
			if [ ! -d "${path_entry}" ]; then
				printf '%sWARNING:%s Adding non-directory path to PATH: %s\n' "$(tput setaf 1)" "$(tput sgr0)" "${path_entry}" 1>&2
			else
				printf '%sINFO:%s Adding to PATH: %s\n' "$(tput setaf 2)" "$(tput sgr0)" "${path_entry}" 1>&2
			fi
			export PATH="${path_entry}:${PATH}"
		fi
	done
}

add_to_path '/usr/local/bin' '/usr/local/sbin'

export EDITOR=/usr/local/bin/vim

# Java config
{% if 'zulu7' in cask_apps %}
export JAVA7="$(/usr/libexec/java_home -F -v 1.7)"
{% endif %}
{% if 'temurin8' in cask_apps %}
export JAVA8="$(/usr/libexec/java_home -F -v 1.8)"
{% endif %}
#export JAVA9="$(/usr/libexec/java_home -F -v 9)"
{% if 'temurin11' in cask_apps %}
export JAVA11="$(/usr/libexec/java_home -F -v 11)"
{% endif %}
{% if 'openjdk' in homebrew_apps %}
export JAVA18="$(/usr/libexec/java_home -F -v 18)"
{% endif %}
export JAVA_HOME="$JAVA11"
export JRE_HOME="$JAVA_HOME/jre"
add_to_path "${JAVA_HOME}/bin"

{% if 'go' in homebrew_apps %}
# Go config
export GOPATH="$HOME/go"
export GOROOT=/usr/local/opt/go/libexec
add_to_path "${GOROOT}/bin" "${GOPATH}/bin"
{% endif %}

{% if 'maven' in homebrew_apps %}
# Maven config
export M2_HOME=/usr/local/opt/maven/libexec
export M2="$M2_HOME/bin"
{% endif %}

{% if 'gradle' in homebrew_apps %}
# Gradle config
export GRADLE_HOME=/usr/local/opt/gradle/libexec
{% endif %}

{% if 'groovysdk' in homebrew_apps %}
# Groovy config
export GROOVY_HOME=/usr/local/opt/groovysdk/libexec
{% endif %}

{% if 'android-sdk' in cask_apps %}
# Android config
export ANDROID_SDK_ROOT="$(brew --prefix)/share/android-sdk"
export ANDROID_HOME="$ANDROID_SDK_ROOT"
{% endif %}

{% if 'nvm' in homebrew_apps %}
# nvm config
export NVM_DIR="$HOME/.nvm"
export HUSKY_SKIP_INSTALL=1
{% endif %}

{% if 'hab' in homebrew_apps %}
# hab config
export HAB_AUTH_TOKEN="{{ hab_auth_token }}"
{% endif %}

{% if 'pyenv' in homebrew_apps %}
# Python pyenv config
#export WORKON_HOME=$HOME/.virtualenvs
export WORKON_HOME="$HOME/.venvs"
if command -v pyenv 1>/dev/null 2>&1; then
	export PYENV_ROOT="$HOME/.pyenv"
	add_to_path "$PYENV_ROOT/bin"
	add_to_path "$PYENV_ROOT/shims"
fi
{% endif %}

{% if 'shellcheck' in homebrew_apps %}
# configuration for shellcheck
export SHELLCHECK_OPTS='--norc --enable=all --exclude=SC2250'
{% endif %}

{% if 'lastpass-cli' in homebrew_apps %}
# lpass config
export LPASS_CLIPBOARD_COMMAND="/usr/local/bin/pbcopyt"
{% endif %}

{% if 'restic' in homebrew_apps %}
# restic config
export RESTIC_REPOSITORY="$HOME/backups/restic-repo"
{% if 'lastpass-cli' in homebrew_apps %}
export RESTIC_PASSWORD_COMMAND='lpass show -p restic'
{% endif %}
{% endif %}

# ansible config
export ANSIBLE_CONFIG="$HOME/.ansible.cfg"
{% if 'lastpass-cli' in homebrew_apps %}
export ANSIBLE_VAULT_PASSWORD_FILE="$HOME/.vault_pass.bash"
{% endif %}

# Homebrew config
export HOMEBREW_GITHUB_API_TOKEN='{{ homebrew_github_api_token }}'

# Runtime environment config
printf '%sINFO:%s sourcing: %s\n' "$(tput setaf 2)" "$(tput sgr0)" "${HOME}/.bashrc" 1>&2
source "${HOME}/.bashrc"

