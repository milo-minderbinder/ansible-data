export BASH_SILENCE_DEPRECATION_WARNING=1

# Put Homebrew's sbin on the PATH
if [ -z "$(printf '%s' "${PATH}" | grep '/usr/local/sbin')" ]; then
	printf "Putting Homebrew's sbin on the PATH\n" >&2
	export PATH="/usr/local/sbin:$PATH"
fi

# Java config
{% if cask_apps['zulu7'] is defined %}
export JAVA7="$(/usr/libexec/java_home -v 1.7)"
{% endif %}
{% if cask_apps['adoptopenjdk8'] is defined %}
export JAVA8="$(/usr/libexec/java_home -v 1.8)"
{% endif %}
export JAVA9="$(/usr/libexec/java_home -v 9)"
{% if cask_apps['adoptopenjdk11'] is defined %}
export JAVA11="$(/usr/libexec/java_home -v 11)"
{% endif %}
{% if cask_apps['java'] is defined %}
export JAVA14="$(/usr/libexec/java_home -v 14)"
{% endif %}
export JAVA_HOME="$JAVA11"
export JRE_HOME="$JAVA_HOME/jre"
if [ -z "$(printf '%s' "${PATH}" | grep "$JAVA_HOME/bin")" ]; then
	export PATH="$JAVA_HOME/bin:$PATH"
fi

{% if homebrew_apps['go'] is defined %}
# Go config
export GOPATH="$HOME/go"
export GOROOT=/usr/local/opt/go/libexec
if [ -z "$(printf '%s' "${PATH}" | grep "$GOROOT/bin")" ]; then
	export PATH="$GOROOT/bin:$PATH"
fi
if [ -z "$(printf '%s' "${PATH}" | grep "$GOPATH/bin")" ]; then
	export PATH="$GOPATH/bin:$PATH"
fi
{% endif %}

{% if homebrew_apps['maven'] is defined %}
# Maven config
export M2_HOME=/usr/local/opt/maven/libexec
export M2="$M2_HOME/bin"
{% endif %}

{% if homebrew_apps['gradle'] is defined %}
# Gradle config
export GRADLE_HOME=/usr/local/opt/gradle/libexec
{% endif %}

{% if homebrew_apps['groovysdk'] is defined %}
# Groovy config
export GROOVY_HOME=/usr/local/opt/groovysdk/libexec
{% endif %}

{% if cask_apps['android-sdk'] is defined %}
# Android config
export ANDROID_SDK_ROOT="$(brew --prefix)/share/android-sdk"
export ANDROID_HOME="$ANDROID_SDK_ROOT"
{% endif %}

{% if homebrew_apps['nvm'] is defined %}
# nvm config
export NVM_DIR="$HOME/.nvm"
[ -s "/usr/local/opt/nvm/nvm.sh" ] && . "/usr/local/opt/nvm/nvm.sh"  # This loads nvm
[ -s "/usr/local/opt/nvm/etc/bash_completion" ] && . "/usr/local/opt/nvm/etc/bash_completion"  # This loads nvm bash_completion
export HUSKY_SKIP_INSTALL=1
{% endif %}

{% if homebrew_apps['hab'] is defined %}
# hab config
eval "$(hab cli completers --shell bash)"
export HAB_AUTH_TOKEN="{{ hab_auth_token }}"
{% endif %}

{% if homebrew_apps['pyenv'] is defined %}
# Python pyenv config
#export WORKON_HOME=$HOME/.virtualenvs
export WORKON_HOME="$HOME/.venvs"
if command -v pyenv 1>/dev/null 2>&1; then
	eval "$(pyenv init -)"
fi
export PYENV_ROOT="$(pyenv root)"
{% endif %}
{% if homebrew_apps['pipenv'] is defined %}
# Python Pipenv config
if command -v pipenv 1>/dev/null 2>&1; then
	eval "$(pipenv --completion)"
fi
{% endif %}

# ansible config
export ANSIBLE_CONFIG="$HOME/.ansible.cfg"
{% if homebrew_apps['lastpass-cli'] is defined %}
export ANSIBLE_VAULT_PASSWORD_FILE="$HOME/.vault_pass.bash"
{% endif %}
{% if cask_apps['docker'] is defined or cask_apps['docker-edge'] is defined %}
export DOCKER_CONFIG_FILE="$HOME/.docker.yml"
{% endif %}

# Homebrew config
export HOMEBREW_GITHUB_API_TOKEN={{ homebrew_github_api_token }}
[[ -r "/usr/local/etc/profile.d/bash_completion.sh" ]] && . "/usr/local/etc/profile.d/bash_completion.sh"

# Show git branch & state in prompt
GIT_PS1_SHOWDIRTYSTATE=true
export PS1='[\h:\u \W$(__git_ps1)]\$ '

export EDITOR=/usr/local/bin/vim

export GPG_TTY="$(tty)"
export SSH_AUTH_SOCK="$(gpgconf --list-dirs agent-ssh-socket)"
gpgconf --launch gpg-agent
#export SSH_AUTH_SOCK="$HOME/.yubiagent/sock"

# use vi keybindings in bash
set -o vi

alias xml-format="XMLLINT_INDENT=$'\t' xmllint --format"
alias docker-images-by-size="docker images | sort -k7 -h"

if [ -d "${HOME}/.bash_profile.d" ]; then
	while IFS=	read -r; do
		printf 'sourcing file in bash profile: %s\n' "${REPLY}"
		source "${REPLY}"
	done < <(find "${HOME}/.bash_profile.d" -type f -iname '*.bash' | sort)
fi

